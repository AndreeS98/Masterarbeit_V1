 html_table = """
        <table>
            <tr>
                <th>ESRS</th>
                <th>Topic</th>
                <th>Sub Topic</th>
                <th>Sub-sub-Topic</th>
            </tr>
            <tr>
                <td rowspan="3">E1</td>
                <td rowspan="3">Climate Change</td>
                <td>Climate change adaptation</td>
                <td>Detail 1 für Climate change adaptation</td>
            </tr>
            <tr>
                <td>Climate change mitigation</td>
                <td>Detail 2 für Climate change mitigation</td>
            </tr>
            <tr>
                <td>Energy</td>
                <td>Detail 3 für Energy</td>
            </tr>
            <tr>
                <td rowspan="5">E2</td>
                <td rowspan="5">Pollution</td>
                <td>Air pollution</td>
                <td>Detail 1 für Air pollution</td>
            <tr>
                <td>Water pollution</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Soil pollution</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Pollution of living organisms and food resources</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Pollution: Substances of concern</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td rowspan="5">E3</td>
                <td rowspan="5">Water and marine resources</td>
                <td>Water withdrawals</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Water consumption</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Water use</td>  
                <td>Detail 1 für Air pollution</td>  
            </tr>
            <tr>
                <td>Water discharges to water bodies and oceans</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Degradation of aquatic/marine habitats and intensity of impact on marine resources</td>
                <td>Detail 1 für Air pollution</td>
            </tr> 
    </table>
    """
    # Verwende HTML, um die Inhalte anzuzeigen
    st.markdown(html_table, unsafe_allow_html=True)




    import streamlit as st
import pandas as pd

def convert_df_to_csv(df):
    # Konvertiere ein DataFrame in ein CSV-Objekt, bereit zum Herunterladen
    return df.to_csv(index=False).encode('utf-8')

def display_page():

    # Initialisiere den Session State für die hochgeladenen Dateien, falls noch nicht geschehen
    if 'uploaded_files' not in st.session_state:
        st.session_state['uploaded_files'] = None

    # Initialisiere den Session State für das DataFrame, falls noch nicht geschehen
    if 'dataf' not in st.session_state:
        # Initialisiere das DataFrame mit den gegebenen Inhalten
        st.session_state['dataf'] = pd.DataFrame(
            [
                ["E1", "Klimawandel", "Anpassung an den Klimawandel", ""],
                ["E1", "Klimawandel", "Eindämmung des Klimawandels", ""],
                ["E1", "Klimawandel", "Energie", ""],
                ["E2", "Verschmutzung", "Luftverschmutzung", ""],
                ["E2", "Verschmutzung", "Wasserverschmutzung", ""],
                ["E2", "Verschmutzung", "Bodenverschmutzung", ""],
                ["E2", "Verschmutzung", "Verschmutzung lebender Organismen und Nahrungsressourcen", ""],
                ["E2", "Verschmutzung", "Verschmutzung: Bedenkliche Stoffe", ""],
                ["E2", "Verschmutzung", "Verschmutzung: Sehr bedenkliche Stoffe", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wasserentnahmen", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wasserverbrauch", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wassernutzung", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wassereinleitungen in Gewässer und in die Ozeane", ""],
                ["E3", "Wasser- und Meeresressourcen", "Verschlechterung der Wasser-/Meereshabitate und Intensität des Einflusses auf die Meeresressourcen", ""],
                ["E4", "Biodiversität und Ökosysteme", "Verlust der biologischen Vielfalt", ""],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf den Zustand der Arten", ""],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf und Abhängigkeiten von Ökosystemleistungen", ""],
                ["E5", "Kreislaufwirtschaft", "Ressourcenzuflüsse, einschließlich Ressourcennutzung", ""],
                ["E5", "Kreislaufwirtschaft", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", ""],
                ["E5", "Kreislaufwirtschaft", "Abfall", ""],

            ],
            columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen"]
        )

    col1, col2 = st.columns([2, 1])  # Ändern der Spaltenverhältnisse für eine breitere Darstellung des DataFrames
    with col1:
        st.session_state['dataf'] = st.data_editor(st.session_state['dataf'], num_rows="dynamic", height=700)
    
    with col2:
        uploaded_files = st.file_uploader("Wählen Sie ein Dokument aus", accept_multiple_files=True, key="file_uploader")
        if st.button("Analysieren", key="analyze_button"):
            st.session_state['uploaded_files'] = uploaded_files

        # Verwende die hochgeladenen Dateien aus dem Session State, wenn vorhanden
        if st.session_state['uploaded_files'] is not None:
            for uploaded_file in st.session_state['uploaded_files']:
                bytes_data = uploaded_file.read()
                st.write("Dateiname:", uploaded_file.name)
                st.write(bytes_data)

        # Trennlinie zwischen Datei-Uploader und Selectboxen
        st.markdown("---")  # Markdown für eine horizontale Linie

        with st.form(key='my_form'):
            st.session_state['esrs'] = st.selectbox("ESRS", ["E1", "E2", "E3", "E4", "E5"], key="esrs_select")
            st.session_state['nachhaltigkeitsaspekt'] = st.selectbox("Nachhaltigkeitsaspekt", ["Klimawandel", "Verschmutzung", "Wasser- und Meeresressourcen",  "Biodiversität und Ökosysteme", "Kreislaufwirtschaft"], key="nachhaltigkeitsaspekt_select")
            st.session_state['themen'] = st.text_input("Thema", key="themen_input")
            st.session_state['unterpunkte'] = st.text_input("Unterthema", key="unterthemen_input")  

            submit_button = st.form_submit_button(label='Hinzufügen')
            if submit_button:
                st.session_state['form_submitted'] = True
            else:
                st.session_state['form_submitted'] = False

        if st.session_state.get('form_submitted', False):
            neue_zeile = pd.DataFrame([[st.session_state['esrs'], st.session_state['nachhaltigkeitsaspekt'], st.session_state['themen'], st.session_state['unterpunkte']]], columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen"])
            st.session_state['dataf'] = pd.concat([st.session_state['dataf'], neue_zeile], ignore_index=True)
            st.session_state['form_submitted'] = False  # Reset the form submission state

        # Trennlinie
        st.markdown("---")
        
        # Download-Button
        csv = convert_df_to_csv(st.session_state['dataf'])
        st.download_button(
            label="Tabelle herunterladen",
            data=csv,
            file_name='dataframe.csv',
            mime='text/csv',
        )


        #Potentielle COde
        import streamlit as st
import pandas as pd

def convert_df_to_csv(df):
    # Konvertiere ein DataFrame in ein CSV-Objekt, bereit zum Herunterladen
    return df.to_csv(index=False).encode('utf-8')

def display_page():

    # Initialisiere den Session State für die hochgeladenen Dateien, falls noch nicht geschehen
    if 'uploaded_files' not in st.session_state:
        st.session_state['uploaded_files'] = None

    # Initialisiere den Session State für das DataFrame, falls noch nicht geschehen
    if 'dataf' not in st.session_state:
        # Initialisiere das DataFrame mit den gegebenen Inhalten
        st.session_state['dataf'] = pd.DataFrame(
            [
                ["E1", "Klimawandel", "Anpassung an den Klimawandel", "", "Standard"],
                ["E1", "Klimawandel", "Eindämmung des Klimawandels", "", "Standard"],
                ["E1", "Klimawandel", "Energie", "", "Standard"],
                ["E2", "Verschmutzung", "Luftverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Wasserverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Bodenverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung lebender Organismen und Nahrungsressourcen", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung: Bedenkliche Stoffe", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung: Sehr bedenkliche Stoffe", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wasserentnahmen", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wasserverbrauch", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wassernutzung", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wassereinleitungen in Gewässer und in die Ozeane", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Verschlechterung der Wasser-/Meereshabitate und Intensität des Einflusses auf die Meeresressourcen", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Verlust der biologischen Vielfalt", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf den Zustand der Arten", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf und Abhängigkeiten von Ökosystemleistungen", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Ressourcenzuflüsse, einschließlich Ressourcennutzung", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Abfall", "", "Standard"],

            ],
            columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen", "Datenherkunft"]
        )

    

    # Sidebar für Datei-Upload und Eingaben
    with st.sidebar:

        st.markdown("---")

        uploaded_files = st.file_uploader("Wählen Sie ein Dokument aus", accept_multiple_files=True)
        if uploaded_files is not None and len(uploaded_files) > 0:
            st.session_state['uploaded_files'] = uploaded_files
        
        # Eingabefelder in der Sidebar
        st.markdown("---")  # Markdown für eine horizontale Linie
        esrs = st.selectbox("ESRS", ["E1", "E2", "E3", "E4", "E5"], key="esrs_select")
        nachhaltigkeitsaspekt = st.selectbox(
            "Nachhaltigkeitsaspekt",
            ["Klimawandel", "Verschmutzung", "Wasser- und Meeresressourcen", "Biodiversität und Ökosysteme", "Kreislaufwirtschaft"],
            key="nachhaltigkeitsaspekt_select"
        )
        themen = st.text_input("Thema", key="themen_input")
        unterthemen = st.text_input("Unterthema", key="unterthemen_input")
        
        if st.button("Hinzufügen", key="hinzufuegen_button"):
            # Füge den neuen Eintrag zum DataFrame hinzu
            neue_zeile = pd.DataFrame(
                [[esrs, nachhaltigkeitsaspekt, themen, unterthemen, "Hinzugefügt"]],
                columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen", "Datenherkunft"]
            )
            st.session_state['dataf'] = pd.concat([st.session_state['dataf'], neue_zeile], ignore_index=True)

            # Hauptbereich für die Anzeige des DataFrames
    st.write("Übersicht der potentiellen Nachhaltigkeitspunkte")
    with st.expander("Tabelle anzeigen/ausblenden", expanded=False):
        st.dataframe(st.session_state['dataf'], height=750, width=1500)

        # Download-Button für das gesamte DataFrame als CSV
        csv = convert_df_to_csv(st.session_state['dataf'])
        st.download_button("Tabelle herunterladen", csv, "dataframe.csv", "text/csv")

    # Wenn Dateien hochgeladen wurden, zeige sie an und lies ihre Daten
    if st.session_state['uploaded_files']:
        for uploaded_file in st.session_state['uploaded_files']:
            bytes_data = uploaded_file.read()
            st.write("Dateiname:", uploaded_file.name)
