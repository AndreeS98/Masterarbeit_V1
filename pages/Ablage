 html_table = """
        <table>
            <tr>
                <th>ESRS</th>
                <th>Topic</th>
                <th>Sub Topic</th>
                <th>Sub-sub-Topic</th>
            </tr>
            <tr>
                <td rowspan="3">E1</td>
                <td rowspan="3">Climate Change</td>
                <td>Climate change adaptation</td>
                <td>Detail 1 für Climate change adaptation</td>
            </tr>
            <tr>
                <td>Climate change mitigation</td>
                <td>Detail 2 für Climate change mitigation</td>
            </tr>
            <tr>
                <td>Energy</td>
                <td>Detail 3 für Energy</td>
            </tr>
            <tr>
                <td rowspan="5">E2</td>
                <td rowspan="5">Pollution</td>
                <td>Air pollution</td>
                <td>Detail 1 für Air pollution</td>
            <tr>
                <td>Water pollution</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Soil pollution</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Pollution of living organisms and food resources</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Pollution: Substances of concern</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td rowspan="5">E3</td>
                <td rowspan="5">Water and marine resources</td>
                <td>Water withdrawals</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Water consumption</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Water use</td>  
                <td>Detail 1 für Air pollution</td>  
            </tr>
            <tr>
                <td>Water discharges to water bodies and oceans</td>
                <td>Detail 1 für Air pollution</td>
            </tr>
            <tr>
                <td>Degradation of aquatic/marine habitats and intensity of impact on marine resources</td>
                <td>Detail 1 für Air pollution</td>
            </tr> 
    </table>
    """
    # Verwende HTML, um die Inhalte anzuzeigen
    st.markdown(html_table, unsafe_allow_html=True)




    import streamlit as st
import pandas as pd

def convert_df_to_csv(df):
    # Konvertiere ein DataFrame in ein CSV-Objekt, bereit zum Herunterladen
    return df.to_csv(index=False).encode('utf-8')

def display_page():

    # Initialisiere den Session State für die hochgeladenen Dateien, falls noch nicht geschehen
    if 'uploaded_files' not in st.session_state:
        st.session_state['uploaded_files'] = None

    # Initialisiere den Session State für das DataFrame, falls noch nicht geschehen
    if 'dataf' not in st.session_state:
        # Initialisiere das DataFrame mit den gegebenen Inhalten
        st.session_state['dataf'] = pd.DataFrame(
            [
                ["E1", "Klimawandel", "Anpassung an den Klimawandel", ""],
                ["E1", "Klimawandel", "Eindämmung des Klimawandels", ""],
                ["E1", "Klimawandel", "Energie", ""],
                ["E2", "Verschmutzung", "Luftverschmutzung", ""],
                ["E2", "Verschmutzung", "Wasserverschmutzung", ""],
                ["E2", "Verschmutzung", "Bodenverschmutzung", ""],
                ["E2", "Verschmutzung", "Verschmutzung lebender Organismen und Nahrungsressourcen", ""],
                ["E2", "Verschmutzung", "Verschmutzung: Bedenkliche Stoffe", ""],
                ["E2", "Verschmutzung", "Verschmutzung: Sehr bedenkliche Stoffe", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wasserentnahmen", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wasserverbrauch", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wassernutzung", ""],
                ["E3", "Wasser- und Meeresressourcen", "Wassereinleitungen in Gewässer und in die Ozeane", ""],
                ["E3", "Wasser- und Meeresressourcen", "Verschlechterung der Wasser-/Meereshabitate und Intensität des Einflusses auf die Meeresressourcen", ""],
                ["E4", "Biodiversität und Ökosysteme", "Verlust der biologischen Vielfalt", ""],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf den Zustand der Arten", ""],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf und Abhängigkeiten von Ökosystemleistungen", ""],
                ["E5", "Kreislaufwirtschaft", "Ressourcenzuflüsse, einschließlich Ressourcennutzung", ""],
                ["E5", "Kreislaufwirtschaft", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", ""],
                ["E5", "Kreislaufwirtschaft", "Abfall", ""],

            ],
            columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen"]
        )

    col1, col2 = st.columns([2, 1])  # Ändern der Spaltenverhältnisse für eine breitere Darstellung des DataFrames
    with col1:
        st.session_state['dataf'] = st.data_editor(st.session_state['dataf'], num_rows="dynamic", height=700)
    
    with col2:
        uploaded_files = st.file_uploader("Wählen Sie ein Dokument aus", accept_multiple_files=True, key="file_uploader")
        if st.button("Analysieren", key="analyze_button"):
            st.session_state['uploaded_files'] = uploaded_files

        # Verwende die hochgeladenen Dateien aus dem Session State, wenn vorhanden
        if st.session_state['uploaded_files'] is not None:
            for uploaded_file in st.session_state['uploaded_files']:
                bytes_data = uploaded_file.read()
                st.write("Dateiname:", uploaded_file.name)
                st.write(bytes_data)

        # Trennlinie zwischen Datei-Uploader und Selectboxen
        st.markdown("---")  # Markdown für eine horizontale Linie

        with st.form(key='my_form'):
            st.session_state['esrs'] = st.selectbox("ESRS", ["E1", "E2", "E3", "E4", "E5"], key="esrs_select")
            st.session_state['nachhaltigkeitsaspekt'] = st.selectbox("Nachhaltigkeitsaspekt", ["Klimawandel", "Verschmutzung", "Wasser- und Meeresressourcen",  "Biodiversität und Ökosysteme", "Kreislaufwirtschaft"], key="nachhaltigkeitsaspekt_select")
            st.session_state['themen'] = st.text_input("Thema", key="themen_input")
            st.session_state['unterpunkte'] = st.text_input("Unterthema", key="unterthemen_input")  

            submit_button = st.form_submit_button(label='Hinzufügen')
            if submit_button:
                st.session_state['form_submitted'] = True
            else:
                st.session_state['form_submitted'] = False

        if st.session_state.get('form_submitted', False):
            neue_zeile = pd.DataFrame([[st.session_state['esrs'], st.session_state['nachhaltigkeitsaspekt'], st.session_state['themen'], st.session_state['unterpunkte']]], columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen"])
            st.session_state['dataf'] = pd.concat([st.session_state['dataf'], neue_zeile], ignore_index=True)
            st.session_state['form_submitted'] = False  # Reset the form submission state

        # Trennlinie
        st.markdown("---")
        
        # Download-Button
        csv = convert_df_to_csv(st.session_state['dataf'])
        st.download_button(
            label="Tabelle herunterladen",
            data=csv,
            file_name='dataframe.csv',
            mime='text/csv',
        )


        #Potentielle COde
        import streamlit as st
import pandas as pd

def convert_df_to_csv(df):
    # Konvertiere ein DataFrame in ein CSV-Objekt, bereit zum Herunterladen
    return df.to_csv(index=False).encode('utf-8')

def display_page():

    # Initialisiere den Session State für die hochgeladenen Dateien, falls noch nicht geschehen
    if 'uploaded_files' not in st.session_state:
        st.session_state['uploaded_files'] = None

    # Initialisiere den Session State für das DataFrame, falls noch nicht geschehen
    if 'dataf' not in st.session_state:
        # Initialisiere das DataFrame mit den gegebenen Inhalten
        st.session_state['dataf'] = pd.DataFrame(
            [
                ["E1", "Klimawandel", "Anpassung an den Klimawandel", "", "Standard"],
                ["E1", "Klimawandel", "Eindämmung des Klimawandels", "", "Standard"],
                ["E1", "Klimawandel", "Energie", "", "Standard"],
                ["E2", "Verschmutzung", "Luftverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Wasserverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Bodenverschmutzung", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung lebender Organismen und Nahrungsressourcen", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung: Bedenkliche Stoffe", "", "Standard"],
                ["E2", "Verschmutzung", "Verschmutzung: Sehr bedenkliche Stoffe", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wasserentnahmen", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wasserverbrauch", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wassernutzung", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Wassereinleitungen in Gewässer und in die Ozeane", "", "Standard"],
                ["E3", "Wasser- und Meeresressourcen", "Verschlechterung der Wasser-/Meereshabitate und Intensität des Einflusses auf die Meeresressourcen", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Verlust der biologischen Vielfalt", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf den Zustand der Arten", "", "Standard"],
                ["E4", "Biodiversität und Ökosysteme", "Auswirkungen auf und Abhängigkeiten von Ökosystemleistungen", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Ressourcenzuflüsse, einschließlich Ressourcennutzung", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", "", "Standard"],
                ["E5", "Kreislaufwirtschaft", "Abfall", "", "Standard"],

            ],
            columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen", "Datenherkunft"]
        )

    

    # Sidebar für Datei-Upload und Eingaben
    with st.sidebar:

        st.markdown("---")

        uploaded_files = st.file_uploader("Wählen Sie ein Dokument aus", accept_multiple_files=True)
        if uploaded_files is not None and len(uploaded_files) > 0:
            st.session_state['uploaded_files'] = uploaded_files
        
        # Eingabefelder in der Sidebar
        st.markdown("---")  # Markdown für eine horizontale Linie
        esrs = st.selectbox("ESRS", ["E1", "E2", "E3", "E4", "E5"], key="esrs_select")
        nachhaltigkeitsaspekt = st.selectbox(
            "Nachhaltigkeitsaspekt",
            ["Klimawandel", "Verschmutzung", "Wasser- und Meeresressourcen", "Biodiversität und Ökosysteme", "Kreislaufwirtschaft"],
            key="nachhaltigkeitsaspekt_select"
        )
        themen = st.text_input("Thema", key="themen_input")
        unterthemen = st.text_input("Unterthema", key="unterthemen_input")
        
        if st.button("Hinzufügen", key="hinzufuegen_button"):
            # Füge den neuen Eintrag zum DataFrame hinzu
            neue_zeile = pd.DataFrame(
                [[esrs, nachhaltigkeitsaspekt, themen, unterthemen, "Hinzugefügt"]],
                columns=["ESRS", "Nachhaltigkeitsaspekt", "Themen", "Unterthemen", "Datenherkunft"]
            )
            st.session_state['dataf'] = pd.concat([st.session_state['dataf'], neue_zeile], ignore_index=True)

            # Hauptbereich für die Anzeige des DataFrames
    st.write("Übersicht der potentiellen Nachhaltigkeitspunkte")
    with st.expander("Tabelle anzeigen/ausblenden", expanded=False):
        st.dataframe(st.session_state['dataf'], height=750, width=1500)

        # Download-Button für das gesamte DataFrame als CSV
        csv = convert_df_to_csv(st.session_state['dataf'])
        st.download_button("Tabelle herunterladen", csv, "dataframe.csv", "text/csv")

    # Wenn Dateien hochgeladen wurden, zeige sie an und lies ihre Daten
    if st.session_state['uploaded_files']:
        for uploaded_file in st.session_state['uploaded_files']:
            bytes_data = uploaded_file.read()
            st.write("Dateiname:", uploaded_file.name)
import streamlit as st
import matplotlib.pyplot as plt

def update_state_generic(key_prefix, gruppe, unterthema, auswahl):
    key = f"{key_prefix}_{gruppe}_{unterthema}"
    st.session_state[key] = auswahl

def define_themes():
    global unterthemen_esrse1, unterthemen_esrse2, unterthemen_esrse3, unterthemen_esrse4
    global unterthemen_esrse5, unterthemen_esrss1, unterthemen_esrss2, unterthemen_esrss3, unterthemen_esrss4, unterthemen_esrsg1, optionen
    unterthemen_esrse1 = ["Anpassung an den Klimawandel", "Klimaschutz", "Energie"]
    unterthemen_esrse2 = ["Luftverschmutzung", "Wasserverschmutzung", "Bodenverschmutzung", "Verschmutzung von lebenden Organismen und Nahrungsressourcen", "Besorgniserregende Stoffe", "Besonders besorgniserregende Stoffe", "Mikroplastik"]
    unterthemen_esrse3 = ["Wasserverbrauch", "Wasserentnahme", "Ableitung von Wasser", "Ableitung von Wasser in die Ozeane", "Gewinnung und Nutzung von Meeresressourcen"]
    unterthemen_esrse4 = {
        "Direkte Ursachen des Biodiversitätsverlusts": ["Klimawandel", "Landnutzungsänderungen, Süßwasser- und Meeresnutzungsänderungen", "Direkte Ausbeutung", "Invasive gebietsfremde Arten", "Umweltverschmutzung", "Sonstige"],
        "Auswirkungen auf den Zustand der Arten": ["Populationsgröße von Arten", "Globales Ausrottungsrisiko von Arten"],
        "Auswirkungen auf den Umfang und den Zustand von Ökosystemen": ["Landdegradation", "Wüstenbildung", "Bodenversiegelung"],
        "Auswirkungen und Abhängigkeiten von Ökosystemdienstleistungen": []
    }
    unterthemen_esrse5 = ["Ressourcenflüsse, einschließlich Ressourcennutzung", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", "Abfall"]
    unterthemen_esrss1 = {
        "Arbeitsbedingungen": ["Sichere Beschäftigung", "Arbeitszeit", "Angemessene Entlohnung", "Sozialer Dialog", "Vereinigungsfreiheit, Existenz von Betriebsräten und Rechte der Arbeitnehmer auf Information, Anhörung und Mitbestimmung", "Tarifverhandlungen, einschließlich der Quote der durch Tarifverträge abgedeckten Arbeitskräften", "Vereinbarkeit von Berufs- und Privatleben", "Gesundheitsschutz und Sicherheit"],
        "Gleichbehandlung und Chancengleichheit": ["Gleichstellung der Geschlechter und gleicher Lohn für gleiche Arbeit", "Schulungen und Kompetenzentwicklung", "Beschäftigung und Inklusion von Menschen mit Behinderungen", "Maßnahmen gegen Gewalt und Belästigung am Arbeitsplatz", "Vielfalt"],
        "Sonstige arbeitsbezoge Rechte": ["Kinderarbeit", "Zwangsarbeit", "Angemessene Unterbringung", "Datenschutz"]
    }
    unterthemen_esrss2 = unterthemen_esrss1
    unterthemen_esrss3 = {
        "Wirtschaftliche, soziale und kulturelle Rechte von Gemeinschaften": ["Angemessene Unterbringung", "Angemessene Ernährung", "Wasser- und Sanitäreinrichtungen", "Bodenbezogene Auswirkungen", "Sicherheitsbezogene Auswirkungen"],
        "Bürgerrechte und politische Rechte von Gemeinschaften": ["Meinungsfreiheit", "Versammlungsfreiheit", "Auswirkung auf Menschenrechtsverteidiger"],
        "Rechte indigener Völker": ["Freiwillige und in Kenntnis der Sachlage erteilte vorherige Zustimmung", "Selbstbestimmung", "Kulturelle Rechte"]
    }
    unterthemen_esrss4 = { 
        "Informationsbezogene Auswirkungen für Verbraucher und/oder Endnutzer": ["Datenschutz", "Meinungsfreiheit", "Zugang zu (hochwertigen) Informationen"],
        "Persönliche Sicherheit von Verbrauchern und/oder Endnutzern": ["Gesundheitsschutz und Sicherheit", "Persönliche Sicherheit", "Kinderschutz"],
        "Soziale Inklusion von Verbrauchern und/oder Endnutzern": ["Nichtdiskriminierung", "Zugang zu Produkten und Dienstleistungen", "Verantwortliche Vermarkzungspraktiken"]
    }
    unterthemen_esrsg1 = ["Unternehmenskultur", "Schutz von Hinweisgebern", "Tierschutz", "Politisches Engagement und Lobbytätigkeiten", "Management der Beziehungen zu Lieferanten, einschließlich Zahlungspraktiken", "Korruption und Bestechung", "Vermeidung und Aufdeckung einschließlich Schulung", "Vorkommnisse"]
    optionen = ["Trifft zu", "Trifft teilweise zu", "Trifft nicht zu"]

def initialize_state():
    initial_state = {**{unterthema: None for unterthema in unterthemen_esrse1 + unterthemen_esrse2 + unterthemen_esrse3 + unterthemen_esrse5 + list(unterthemen_esrsg1)},
                     **{f"{gruppe}_{unterthema}": None for gruppe in unterthemen_esrse4 for unterthema in unterthemen_esrse4[gruppe]},
                     **{f"S1_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss1 for unterthema in unterthemen_esrss1[gruppe]},
                     **{f"S2_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss2 for unterthema in unterthemen_esrss2[gruppe]},
                     **{f"S3_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss3 for unterthema in unterthemen_esrss3[gruppe]},
                     **{f"S4_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss4 for unterthema in unterthemen_esrss4[gruppe]}}
    for key, value in initial_state.items():
        if key not in st.session_state:
            st.session_state[key] = value

def create_expander(thema, unterthemen, state_key):
    with st.expander(thema):
        col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
        if thema == unterthemen_esrse1:
            col_text.write("**" + "Klimawandel" + "**")
        elif thema == unterthemen_esrse2:
            col_text.write("**" + "Umweltverschmutzung" + "**")
        elif thema == unterthemen_esrse3:
            col_text.write("**" + "Wasser- & Meeresressourcen" + "**")
        elif thema == unterthemen_esrse5:
            col_text.write("**" + "Kreislaufwirtschaft" + "**")
        elif thema == unterthemen_esrsg1:
            col_text.write("**" + "Unternehmenspolitik" + "**")
        
        col_rb1.write("Trifft zu")
        col_rb2.write("Trifft teilweise zu")
        col_rb3.write("Trifft nicht zu")
        for unterthema in unterthemen:
            col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
            with col_text:
                st.markdown(f"<p style='font-family:Source Sans Pro;'>• {unterthema}</p>", unsafe_allow_html=True)
            for i, option in enumerate(optionen):
                col = [col_rb1, col_rb2, col_rb3][i]
                with col:
                    checkbox_key = f"{state_key}_{unterthema}_{option}"
                    checkbox_value = st.session_state.get(checkbox_key, False)
                    # Hier passen wir den Aufruf an die erwartete Signatur von update_state_generic an
                    st.checkbox("Select", key=checkbox_key, value=checkbox_value, on_change=update_state_generic, args=(state_key, '', unterthema, option), label_visibility="collapsed")

def create_expander_with_subgroups(thema, unterthemen_gruppen, state_key_prefix):
    with st.expander(thema):
        # Nur in der ersten Zeile die Optionen anzeigen
        col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
        with col_text:
            st.write("")  # Leer, um die Spalte zu füllen
        with col_rb1:
            st.write("Trifft zu")
        with col_rb2:
            st.write("Trifft teilweise zu")
        with col_rb3:
            st.write("Trifft nicht zu")
            
        for gruppe, unterthemen in unterthemen_gruppen.items():
            st.markdown(f"**{gruppe}**")
            for unterthema in unterthemen:
                col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
                with col_text:
                    st.markdown(f"• {unterthema}")
                for i, option in enumerate(optionen):
                    col = [col_rb1, col_rb2, col_rb3][i]
                    with col:
                        checkbox_key = f"{state_key_prefix}_{gruppe}_{unterthema}_{option}"
                        checkbox_value = st.session_state.get(checkbox_key, False)
                        # Die Label-Visibility "collapsed" entfernen, da wir jetzt die Optionen oben anzeigen
                        st.checkbox("Select", key=checkbox_key, value=checkbox_value, on_change=update_state_generic, args=(state_key_prefix, gruppe, unterthema, option), label_visibility="collapsed")


def display_expanders():
    create_expander("ESRS E1 Klimawandel", unterthemen_esrse1, 'auswahl')
    create_expander("ESRS E2 Umweltverschmutzung", unterthemen_esrse2, 'auswahl')
    create_expander("ESRS E3 Wasser- & Meeresressourcen", unterthemen_esrse3, 'auswahl')
    create_expander_with_subgroups("ESRS E4 Biologische Vielfalt und Ökosysteme", unterthemen_esrse4, 'auswahl_e4')
    create_expander("ESRS E5 Kreislaufwirtschaft", unterthemen_esrse5, 'auswahl')
    create_expander_with_subgroups("ESRS S1 Eigene Belegschaft", unterthemen_esrss1, 'auswahl_s1')
    create_expander_with_subgroups("ESRS S2 Arbeitskräfte in der Wertschöpfungskette", unterthemen_esrss2, 'auswahl_s2')
    create_expander_with_subgroups("ESRS S3 Betroffene Gemeinschaften", unterthemen_esrss3, 'auswahl_s3')
    create_expander_with_subgroups("ESRS S4 Verbraucher und Endnutzer", unterthemen_esrss4, 'auswahl_s4')
    create_expander("ESRS G1 Unternehmenspolitik", unterthemen_esrsg1, 'auswahl')

def display_page():

    define_themes()
    initialize_state()
    display_expanders()
    themen_auswahlen = {
        "ESRS E1": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse1],
        "ESRS E2": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse2],
        "ESRS E3": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse3],
        "ESRS E4": [f"auswahl_e4_{gruppe}_{unterthema}" for gruppe in unterthemen_esrse4 for unterthema in unterthemen_esrse4[gruppe]],
        "ESRS E5": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse5],
        "ESRS S1": [f"auswahl_s1_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss1 for unterthema in unterthemen_esrss1[gruppe]],
        "ESRS S2": [f"auswahl_s2_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss2 for unterthema in unterthemen_esrss2[gruppe]],
        "ESRS S3": [f"auswahl_s3_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss3 for unterthema in unterthemen_esrss3[gruppe]],
        "ESRS S4": [f"auswahl_s4_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss4 for unterthema in unterthemen_esrss4[gruppe]],
        "ESRS G1": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrsg1]
    }

#17.04.2024

import streamlit as st
import matplotlib.pyplot as plt
import altair as alt
import pandas as pd

def update_state_generic(key_prefix, gruppe, unterthema, auswahl):
    key = f"{key_prefix}_{gruppe}_{unterthema}"
    st.session_state[key] = auswahl

def define_themes():
    global unterthemen_esrse1, unterthemen_esrse2, unterthemen_esrse3, unterthemen_esrse4
    global unterthemen_esrse5, unterthemen_esrss1, unterthemen_esrss2, unterthemen_esrss3, unterthemen_esrss4, unterthemen_esrsg1, optionen
    unterthemen_esrse1 = ["Anpassung an den Klimawandel", "Klimaschutz", "Energie"]
    unterthemen_esrse2 = ["Luftverschmutzung", "Wasserverschmutzung", "Bodenverschmutzung", "Verschmutzung von lebenden Organismen und Nahrungsressourcen", "Besorgniserregende Stoffe", "Besonders besorgniserregende Stoffe", "Mikroplastik"]
    unterthemen_esrse3 = ["Wasserverbrauch", "Wasserentnahme", "Ableitung von Wasser", "Ableitung von Wasser in die Ozeane", "Gewinnung und Nutzung von Meeresressourcen"]
    unterthemen_esrse4 = {
        "Direkte Ursachen des Biodiversitätsverlusts": ["Klimawandel", "Landnutzungsänderungen, Süßwasser- und Meeresnutzungsänderungen", "Direkte Ausbeutung", "Invasive gebietsfremde Arten", "Umweltverschmutzung", "Sonstige"],
        "Auswirkungen auf den Zustand der Arten": ["Populationsgröße von Arten", "Globales Ausrottungsrisiko von Arten"],
        "Auswirkungen auf den Umfang und den Zustand von Ökosystemen": ["Landdegradation", "Wüstenbildung", "Bodenversiegelung"],
        "Auswirkungen und Abhängigkeiten von Ökosystemdienstleistungen": []
    }
    unterthemen_esrse5 = ["Ressourcenflüsse, einschließlich Ressourcennutzung", "Ressourcenabflüsse in Bezug auf Produkte und Dienstleistungen", "Abfall"]
    unterthemen_esrss1 = {
        "Arbeitsbedingungen": ["Sichere Beschäftigung", "Arbeitszeit", "Angemessene Entlohnung", "Sozialer Dialog", "Vereinigungsfreiheit, Existenz von Betriebsräten und Rechte der Arbeitnehmer auf Information, Anhörung und Mitbestimmung", "Tarifverhandlungen, einschließlich der Quote der durch Tarifverträge abgedeckten Arbeitskräften", "Vereinbarkeit von Berufs- und Privatleben", "Gesundheitsschutz und Sicherheit"],
        "Gleichbehandlung und Chancengleichheit": ["Gleichstellung der Geschlechter und gleicher Lohn für gleiche Arbeit", "Schulungen und Kompetenzentwicklung", "Beschäftigung und Inklusion von Menschen mit Behinderungen", "Maßnahmen gegen Gewalt und Belästigung am Arbeitsplatz", "Vielfalt"],
        "Sonstige arbeitsbezoge Rechte": ["Kinderarbeit", "Zwangsarbeit", "Angemessene Unterbringung", "Datenschutz"]
    }
    unterthemen_esrss2 = unterthemen_esrss1
    unterthemen_esrss3 = {
        "Wirtschaftliche, soziale und kulturelle Rechte von Gemeinschaften": ["Angemessene Unterbringung", "Angemessene Ernährung", "Wasser- und Sanitäreinrichtungen", "Bodenbezogene Auswirkungen", "Sicherheitsbezogene Auswirkungen"],
        "Bürgerrechte und politische Rechte von Gemeinschaften": ["Meinungsfreiheit", "Versammlungsfreiheit", "Auswirkung auf Menschenrechtsverteidiger"],
        "Rechte indigener Völker": ["Freiwillige und in Kenntnis der Sachlage erteilte vorherige Zustimmung", "Selbstbestimmung", "Kulturelle Rechte"]
    }
    unterthemen_esrss4 = { 
        "Informationsbezogene Auswirkungen für Verbraucher und/oder Endnutzer": ["Datenschutz", "Meinungsfreiheit", "Zugang zu (hochwertigen) Informationen"],
        "Persönliche Sicherheit von Verbrauchern und/oder Endnutzern": ["Gesundheitsschutz und Sicherheit", "Persönliche Sicherheit", "Kinderschutz"],
        "Soziale Inklusion von Verbrauchern und/oder Endnutzern": ["Nichtdiskriminierung", "Zugang zu Produkten und Dienstleistungen", "Verantwortliche Vermarkzungspraktiken"]
    }
    unterthemen_esrsg1 = ["Unternehmenskultur", "Schutz von Hinweisgebern", "Tierschutz", "Politisches Engagement und Lobbytätigkeiten", "Management der Beziehungen zu Lieferanten, einschließlich Zahlungspraktiken", "Korruption und Bestechung", "Vermeidung und Aufdeckung einschließlich Schulung", "Vorkommnisse"]
    optionen = ["Wesentlich", "Teilweise Wesentlich", "Nicht Wesentlich"]

def initialize_state():
    initial_state = {**{unterthema: None for unterthema in unterthemen_esrse1 + unterthemen_esrse2 + unterthemen_esrse3 + unterthemen_esrse5 + list(unterthemen_esrsg1)},
                     **{f"{gruppe}_{unterthema}": None for gruppe in unterthemen_esrse4 for unterthema in unterthemen_esrse4[gruppe]},
                     **{f"S1_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss1 for unterthema in unterthemen_esrss1[gruppe]},
                     **{f"S2_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss2 for unterthema in unterthemen_esrss2[gruppe]},
                     **{f"S3_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss3 for unterthema in unterthemen_esrss3[gruppe]},
                     **{f"S4_{gruppe}_{unterthema}": None for gruppe in unterthemen_esrss4 for unterthema in unterthemen_esrss4[gruppe]}}
    for key, value in initial_state.items():
        if key not in st.session_state:
            st.session_state[key] = value

def create_expander(thema, unterthemen, state_key):
    with st.expander(thema):
        col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
        if thema == unterthemen_esrse1:
            col_text.write("**" + "Klimawandel" + "**")
        elif thema == unterthemen_esrse2:
            col_text.write("**" + "Umweltverschmutzung" + "**")
        elif thema == unterthemen_esrse3:
            col_text.write("**" + "Wasser- & Meeresressourcen" + "**")
        elif thema == unterthemen_esrse5:
            col_text.write("**" + "Kreislaufwirtschaft" + "**")
        elif thema == unterthemen_esrsg1:
            col_text.write("**" + "Unternehmenspolitik" + "**")

        col_rb1.write("Wesenlich")
        col_rb2.write("Teilweise Wesentlich")
        col_rb3.write("Nicht Wesentlich")
        for unterthema in unterthemen:
            col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
            with col_text:
                st.markdown(f"<p style='font-family:Source Sans Pro;'>• {unterthema}</p>", unsafe_allow_html=True)
            for i, option in enumerate(optionen):
                col = [col_rb1, col_rb2, col_rb3][i]
                with col:
                    checkbox_key = f"{state_key}_{unterthema}_{option}"
                    checkbox_value = st.session_state.get(checkbox_key, False)
                    # Hier passen wir den Aufruf an die erwartete Signatur von update_state_generic an
                    st.checkbox("Select", key=checkbox_key, value=checkbox_value, on_change=update_state_generic, args=(state_key, '', unterthema, option), label_visibility="collapsed")

def create_expander_with_subgroups(thema, unterthemen_gruppen, state_key_prefix):
    with st.expander(thema):
        # Nur in der ersten Zeile die Optionen anzeigen
        col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
        with col_text:
            st.write("")  # Leer, um die Spalte zu füllen
        with col_rb1:
            st.write("Wesentlich")
        with col_rb2:
            st.write("Teilweise Wesentlich")
        with col_rb3:
            st.write("Nicht Wesentlich")

        for gruppe, unterthemen in unterthemen_gruppen.items():
            st.markdown(f"**{gruppe}**")
            for unterthema in unterthemen:
                col_text, col_rb1, col_rb2, col_rb3 = st.columns([6, 1, 1, 1])
                with col_text:
                    st.markdown(f"• {unterthema}")
                for i, option in enumerate(optionen):
                    col = [col_rb1, col_rb2, col_rb3][i]
                    with col:
                        checkbox_key = f"{state_key_prefix}_{gruppe}_{unterthema}_{option}"
                        checkbox_value = st.session_state.get(checkbox_key, False)
                        # Die Label-Visibility "collapsed" entfernen, da wir jetzt die Optionen oben anzeigen
                        st.checkbox("Select", key=checkbox_key, value=checkbox_value, on_change=update_state_generic, args=(state_key_prefix, gruppe, unterthema, option), label_visibility="collapsed")

def display_expanders():
    create_expander("ESRS E1 Klimawandel", unterthemen_esrse1, 'auswahl')
    create_expander("ESRS E2 Umweltverschmutzung", unterthemen_esrse2, 'auswahl')
    create_expander("ESRS E3 Wasser- & Meeresressourcen", unterthemen_esrse3, 'auswahl')
    create_expander_with_subgroups("ESRS E4 Biologische Vielfalt und Ökosysteme", unterthemen_esrse4, 'auswahl_e4')
    create_expander("ESRS E5 Kreislaufwirtschaft", unterthemen_esrse5, 'auswahl')
    create_expander_with_subgroups("ESRS S1 Eigene Belegschaft", unterthemen_esrss1, 'auswahl_s1')
    create_expander_with_subgroups("ESRS S2 Arbeitskräfte in der Wertschöpfungskette", unterthemen_esrss2, 'auswahl_s2')
    create_expander_with_subgroups("ESRS S3 Betroffene Gemeinschaften", unterthemen_esrss3, 'auswahl_s3')
    create_expander_with_subgroups("ESRS S4 Verbraucher und Endnutzer", unterthemen_esrss4, 'auswahl_s4')
    create_expander("ESRS G1 Unternehmenspolitik", unterthemen_esrsg1, 'auswahl')

def display_page():
    define_themes()
    initialize_state()
    display_expanders()
    themen_auswahlen = {
        "ESRS E1": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse1],
        "ESRS E2": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse2],
        "ESRS E3": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse3],
        "ESRS E4": [f"auswahl_e4_{gruppe}_{unterthema}" for gruppe in unterthemen_esrse4 for unterthema in unterthemen_esrse4[gruppe]],
        "ESRS E5": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrse5],
        "ESRS S1": [f"auswahl_s1_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss1 for unterthema in unterthemen_esrss1[gruppe]],
        "ESRS S2": [f"auswahl_s2_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss2 for unterthema in unterthemen_esrss2[gruppe]],
        "ESRS S3": [f"auswahl_s3_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss3 for unterthema in unterthemen_esrss3[gruppe]],
        "ESRS S4": [f"auswahl_s4_{gruppe}_{unterthema}" for gruppe in unterthemen_esrss4 for unterthema in unterthemen_esrss4[gruppe]],
        "ESRS G1": [f"auswahl_{unterthema}" for unterthema in unterthemen_esrsg1]
    }   